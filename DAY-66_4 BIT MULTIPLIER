RTL CODE:
`timescale 1ns / 1ps
//Date : 12/11/2024
//Name : Charan Kopparla

module multiplier_4bit(
  input [3:0] a,
  input [3:0] b,
  output [7:0] out
);

  wire [7:0] temp [3:0];

  // Generate partial products
  assign temp[0] = a[0] * b;
  assign temp[1] = a[1] * b << 1;
  assign temp[2] = a[2] * b << 2;
  assign temp[3] = a[3] * b << 3;

  // Add partial products
  assign out = temp[0] + temp[1] + temp[2] + temp[3];

endmodule

TEST BENCH :
`timescale 1ns/1ns
//Date : 12/11/2024
//Name : Charan Kopparla

module multiplier_4bit_tb;
  reg [3:0] a, b;
  wire [7:0] out;

  multiplier_4bit DUT (
    .a(a),
    .b(b),
    .out(out)
  );

  initial begin
    // Test case 1
    a = 4'd5;
    b = 4'd6;
    #10;

    // Test case 2
    a = 4'd12;
    b = 4'd9;
    #10;


    // Test case 3
    a = 4'd15;
    b = 4'd15;
    #10;
    
    $finish;
  end
endmodule
