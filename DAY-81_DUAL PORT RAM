RTL CODE :
`timescale 1ns / 1ps
//Date : 28/1/2024
//Name : Charan Kopparla 


module Dual_Port_RAM #(
    parameter DATA_WIDTH = 8,
    parameter ADDR_WIDTH = 4
)(
    input clk,
    input we1,
    input [ADDR_WIDTH-1:0] addr1,
    input [DATA_WIDTH-1:0] din1,
    output reg [DATA_WIDTH-1:0] dout1,
    input we2,
    input [ADDR_WIDTH-1:0] addr2,
    input [DATA_WIDTH-1:0] din2,
    output reg [DATA_WIDTH-1:0] dout2
);

    reg [DATA_WIDTH-1:0] mem [(2**ADDR_WIDTH)-1:0];

    always @(posedge clk) begin
        if (we1)
            mem[addr1] <= din1;
        else
            dout1 <= mem[addr1];

        if (we2)
            mem[addr2] <= din2;
        else
            dout2 <= mem[addr2];
    end
endmodule


TEST BENCH :

`timescale 1ns / 1ps
//Date : 28/1/2024
//Name : Charan Kopparla 


module Dual_Port_RAM_tb;

    reg clk;
    reg we1, we2;
    reg [3:0] addr1, addr2;
    reg [7:0] din1, din2;
    wire [7:0] dout1, dout2;

    Dual_Port_RAM uut (
        .clk(clk),
        .we1(we1),
        .addr1(addr1),
        .din1(din1),
        .dout1(dout1),
        .we2(we2),
        .addr2(addr2),
        .din2(din2),
        .dout2(dout2)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        we1 = 1; addr1 = 4'd0; din1 = 8'd10; #10;
        we2 = 1; addr2 = 4'd1; din2 = 8'd20; #10;
        we1 = 0; addr1 = 4'd0; #10;
        we2 = 0; addr2 = 4'd1; #10;
        $finish;
    end

    initial begin
        $monitor("Time=%0d addr1=%d din1=%d dout1=%d we1=%b addr2=%d din2=%d dout2=%d we2=%b",
                 $time, addr1, din1, dout1, we1, addr2, din2, dout2, we2);
    end
endmodule
