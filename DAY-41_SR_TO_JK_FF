RTL CODE :
`timescale 1ns / 1ps
//Date : 18/10/2024
//Name : Charan Kopparla 

module SR_to_JK_ff(
    input J,     
    input K,      
    input clk,    
    input reset,  
    output reg Q, 
    output reg Qn 
);

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            Q <= 1'b0;  
            Qn <= 1'b1; 
        end
        else begin
            case ({J, K})
                2'b00: ;               
                2'b01: Q <= 1'b0;      
                2'b10: Q <= 1'b1;     
                2'b11: Q <= ~Q;        
            endcase
            Qn <= ~Q; 
        end
    end

endmodule

TEST BENCH :
`timescale 1ns / 1ps
//Date : 18/10/2024
//Name : Charan Kopparla 

module SR_to_JK_tb();
    reg J;
    reg K;
    reg clk;
    reg reset;
    wire Q;
    wire Qn;

    
    SR_to_JK_ff dut (
        .J(J), 
        .K(K), 
        .clk(clk), 
        .reset(reset), 
        .Q(Q), 
        .Qn(Qn)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

   
    initial begin
        
        reset = 1;
        J = 0;
        K = 0;  //
        #10 
        reset = 0;
        #10 
        J = 0; K = 0;
        #10 
        J = 0; K = 1;
        #10 
        J = 1; K = 0;
        #10 
        J = 1; K = 1;
        #10 
        J = 0; K = 0;
        #10 
        J = 1; K = 1;
        end 
        initial begin
        #100;
        $finish();
    end
    
    initial begin
        $monitor(" J = %b, K = %b, Q = %b, Qn = %b", J, K, Q, Qn);
    end

endmodule
