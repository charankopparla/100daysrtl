RTL CODE :

`timescale 1ns / 1ps
//Date : 11/09/2024
//Name : Charan Kopparla


module RAM_32_BIT(
    input clk,rst,wr,rd,
    input [31:0] data_in,
    input [4:0] addr,
    output [31:0] data_out);
        reg[31:0] ram[0:31];
        
    always@(posedge clk)
    begin 
     if(rst)
       begin 
       ram[addr] <=32'b0;
       end
     else 
       begin 
        if(wr)
         ram[addr] <= data_in;
         end
         end
       assign data_out = rd? ram[addr] : 32'dz;

endmodule

TEST BENCH :

`timescale 1ns / 1ps
//Date : 11/09/2024
//Name : Charan Kopparla


module RAM_32_BIT_TB();
    reg clk,rst,wr,rd;
    reg [31:0] data_in;
    reg [4:0] addr;
   wire [31:0] data_out;

RAM_32_BIT dut(clk,rst,wr,rd,data_in,addr,data_out);

    integer i;
    always #5 clk=~clk;
    initial clk=0;
    initial begin 
     rst = 1;
     #10;
     rst = 0;
 
     for(i = 0; i<15;i=i+1)
       begin 
        wr = 1'b1;
        data_in = $random();
        addr = $random();
        #10;
        $display("wr=%b,data_in = %d ,addr = %d",wr,data_in,addr);
        #10;
        rd = 1'b1;
        #10;
        $display("rd=%b,data_in = %d ,addr = %d",wr,data_in,addr);
        end
        end 
        initial begin 
        #200;
        $finish();
        end 
endmodule
