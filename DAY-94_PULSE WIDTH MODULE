RTL CODE :
`timescale 1ns / 1ps
// Date: 11/12/2024
// Name: Charan Kopparla 

module pwm_generator (
    input clk, reset,
    input [7:0] duty_cycle,  // 8-bit duty cycle control
    output reg pwm_out
);
    reg [7:0] counter;

    // Always block for counter operation
    always @(posedge clk or posedge reset) begin
        if (reset)
            counter <= 8'b0; // Clear counter on reset
        else
            counter <= counter + 1;
    end

    // Always block for PWM output control
    always @(counter or duty_cycle) begin
        if (counter < duty_cycle)
            pwm_out <= 1;
        else
            pwm_out <= 0;
    end
endmodule

TEST BENCH :
`timescale 1ns / 1ps
//Date : 12/12/2024
//Name : Charan Kopparla 

module tb_pwm_generator;
    reg clk, reset;
    reg [7:0] duty_cycle;
    wire pwm_out;

    pwm_generator uut (
        .clk(clk),
        .reset(reset),
        .duty_cycle(duty_cycle),
        .pwm_out(pwm_out)
    );

    initial begin
        clk = 0; reset = 1; duty_cycle = 8'd128;  // 50% duty cycle
        #10 reset = 0;
        #1000 $finish;
    end

    always #5 clk = ~clk;
endmodule
