RTL CODE :
`timescale 1ns / 1ps
//Date : 21/11/2024
//Name : Charan Kopparla 

module comparator_1bit_using_mux (
    input A,
    input B,
    output A_equal_B,
    output A_greater_B,
    output A_less_B
);
    wire [1:0] select;
    wire [3:0] eq_inputs, gt_inputs, lt_inputs;

    assign select = {A, B};

    // MUX inputs for A_equal_B
    assign eq_inputs = 4'b1001;  // 1 if A == B, 0 otherwise
    assign A_equal_B = eq_inputs[select];

    // MUX inputs for A_greater_B
    assign gt_inputs = 4'b0100;  // 1 if A > B, 0 otherwise
    assign A_greater_B = gt_inputs[select];

    // MUX inputs for A_less_B
    assign lt_inputs = 4'b0010;  // 1 if A < B, 0 otherwise
    assign A_less_B = lt_inputs[select];

endmodule

TEST BENCH :
`timescale 1ns / 1ps
//Date : 21/11/2024
//Name : Charan Kopparla 

`timescale 1ns / 1ps

module tb_comparator_1bit_using_mux;
    reg A;
    reg B;
    wire A_equal_B;
    wire A_greater_B;
    wire A_less_B;

    comparator_1bit_using_mux uut (
        .A(A),
        .B(B),
        .A_equal_B(A_equal_B),
        .A_greater_B(A_greater_B),
        .A_less_B(A_less_B)
    );

    initial begin
        $monitor("Time: %0t | A: %b | B: %b | A_equal_B: %b | A_greater_B: %b | A_less_B: %b", $time, A, B, A_equal_B, A_greater_B, A_less_B);

       
        A = 0; B = 0; #10;

        A = 0; B = 1; #10;

        A = 1; B = 0; #10;

        A = 1; B = 1; #10;

        $finish;
    end
endmodule
