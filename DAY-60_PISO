RTL CODE:
`timescale 1ns / 1ps
//Date : 6/11/2024
//Name : Charan Kopparla 

module PISO(
    input clk,rst,
    input load,
    input [3:0]parallel_in,
    output reg  serial_out);
    
    reg [3:0] shift_reg;
    
always @ (posedge clk or posedge rst)
 begin 
   if(rst)
    begin
      shift_reg <= 4'b0000;
      serial_out <=1'b0;
    end
   else if(load)
     begin 
       shift_reg <= parallel_in;
     end  
       
   else begin 
     serial_out  <= shift_reg[3];
     shift_reg[3] <= shift_reg[2];
     shift_reg[2] <= shift_reg[1];
     shift_reg[1] <= shift_reg[0];
     shift_reg[0] <= 1'b0;
     end 
    end 
endmodule


TEST BENCH:
`timescale 1ns / 1ps
// Date : 6/11/2024
// Name : Charan Kopparla

module PISO_tb();
    reg clk, rst;
    reg load;
    reg [3:0] parallel_in;    
    wire serial_out;         

    
    PISO dut (
        .clk(clk),
        .rst(rst),
        .load(load),
        .parallel_in(parallel_in),
        .serial_out(serial_out)
    );

    
    initial clk = 0;
    always #5 clk = ~clk; 

    initial begin
        
        rst = 1; load = 0; parallel_in = 4'b0000;
       
        #10 rst = 0;
        #10 parallel_in = 4'b1011; load = 1; 
        #10 load = 0; 
        #50;

        #10 parallel_in = 4'b0110; load = 1; 
        #10 load = 0; 
        #50;
        $finish;
    end

    
    initial begin
        $monitor("Time = %0t | parallel_in = %b | serial_out = %b | load = %b", 
                 $time, parallel_in, serial_out, load);
    end
endmodule

