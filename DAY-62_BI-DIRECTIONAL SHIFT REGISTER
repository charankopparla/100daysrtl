RTL CODE :
`timescale 1ns / 1ps
// Date : 8/11/2024
// Name : Charan Kopparla 

module bi_dir_shift_reg(
    input clk,
    input rst,
    input shift_left,  
    input serial_in,  
    output reg [3:0] data_out
);

always @(posedge clk or posedge rst) begin
    if (rst)
        data_out <= 4'b0000;
    else if (shift_left)
        data_out <= {data_out[2:0], serial_in};  
    else
        data_out <= {serial_in, data_out[3:1]}; 
end

endmodule

TEST BENCH :
`timescale 1ns / 1ps
// Date : 8/11/2024
// Name : Charan Kopparla 

module bi_dir_shift_reg_tb();
    reg clk;
    reg rst;
    reg shift_left;
    reg serial_in;
    wire [3:0] data_out;

    bi_dir_shift_reg dut (
        .clk(clk),
        .rst(rst),
        .shift_left(shift_left),
        .serial_in(serial_in),
        .data_out(data_out)
    );

    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        // Reset the register
        rst = 1;
        shift_left = 0;
        serial_in = 0;
        #10;
        
        // Release reset
        rst = 0;
        #10;

        // Shift right with serial_in = 1
        shift_left = 0;
        serial_in = 1;
        #10;
        #10;
        
        // Shift left with serial_in = 0
        shift_left = 1;
        serial_in = 0;
        #10;
        #10;
        
        // Shift left with serial_in = 1
        shift_left = 1;
        serial_in = 1;
        #10;
        #10;

        // Shift right with serial_in = 0
        shift_left = 0;
        serial_in = 0;
        #10;
        #10;

        $finish;
    end
endmodule
