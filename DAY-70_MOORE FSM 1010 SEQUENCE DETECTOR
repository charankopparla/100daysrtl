RTL CODE :
`timescale 1ns / 1ps
//Date : 16/11/2024
//Name : Charan Kopparla
module moore_1010_detector (
    input clk,
    input rst,
    input in,
    output reg out
);
    
    parameter S0 = 3'b000;
    parameter S1 = 3'b001;
    parameter S2 = 3'b010;
    parameter S3 = 3'b011;
    parameter S4 = 3'b100;

    reg [2:0] state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst)
            state <= S0;
        else
            state <= next_state;
    end

    always @(state or in) begin
        case (state)
            S0: next_state = in ? S1 : S0;
            S1: next_state = in ? S1 : S2;
            S2: next_state = in ? S3 : S0;
            S3: next_state = in ? S1 : S4;
            S4: next_state = in ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state) begin
        out = (state == S4);
    end
endmodule


TEST BENCH :
`timescale 1ns / 1ps
//Date : 16/11/2024
//Name : Charan Kopparla

`timescale 1ns / 1ps

module tb_moore_1010_detector;
    reg clk;
    reg rst;
    reg in;
    wire out;

    moore_1010_detector uut (
        .clk(clk),
        .rst(rst),
        .in(in),
        .out(out)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        rst = 1;
        in = 0;
        #10 rst = 0;
        #10 in = 1;
        #10 in = 0;
        #10 in = 1;
        #10 in = 0; // Detects "1010", out should be 1
        #10 in = 1;
        #10 in = 0;
        #10 in = 1;
        #10 in = 0; // Detects another "1010", out should be 1
        #10 in = 1;
        #10 in = 1;
        #10 in = 0;
        #10 in = 1;
        #10 in = 0; // Detects "1010" again
        #10 $finish;
    end

    initial begin
        $monitor("Time: %0t | Reset: %b | Input: %b | Output: %b", $time, rst, in, out);
    end
endmodule


